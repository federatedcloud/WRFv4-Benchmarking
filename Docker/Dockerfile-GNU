FROM ubuntu:18.04
# Ubuntu 18.04 base

MAINTAINER Peter Vaillancourt "pzv2@cornell.edu"

## Use bash for compile
## This Dockerfile compiles WRF from source during "docker build" step
SHELL ["/bin/bash","-c"]
ENV WRF_VERSION=4.2.2

## Ensuring only root user to prepare for singularity conversion
ARG USER=root
USER root
ARG HOME=/root

ARG DEBIAN_FRONTEND=noninteractive

RUN mkdir /opt/wrf
RUN set -eux

## Stacksize - WRF is greedy
## See https://forum.mmm.ucar.edu/phpBB3/viewtopic.php?t=133
## Setting OS stacksize to unlimited, setting OpenMP stacksize to 96GB
ENV OMP_STACKSIZE=96G

RUN ulimit -s unlimited && \
    echo ulimit -s unlimited >> /etc/bashrc && \
    echo export OMP_STACKSIZE=96G >> /etc/bashrc

## Set up some useful environment variables
ENV MAIN_DIR=/opt/wrf
ENV WRF_SRC_ROOT_DIR=${MAIN_DIR}/WRF
ENV DIR=${MAIN_DIR}/LIBRARIES
ENV CC=gcc
ENV FC=gfortran
ENV FCFLAGS=-m64
ENV F77=mpif90
ENV FFLAGS=-m64
ENV JASPERLIB=$DIR/grib2/lib
ENV JASPERINC=$DIR/grib2/include
ENV NETCDF=$DIR/NETCDF
ENV PNETCDF=$DIR/PNETCDF
ENV PHDF5=$DIR/PHDF5
ENV LDFLAGS=-L$DIR/grib2/lib
ENV CPPFLAGS="-I${PHDF5}/include -I${PNETCDF}/include -I${NETCDF}/include -I$DIR/grib2/include"
ENV PATH=${NETCDF}/bin:${PNETCDF}/bin:$PATH:$DIR/grib2
ENV LD_LIBRARY_PATH=$PHDF5/lib:$PNETCDF/lib:$NETCDF/lib:$LD_LIBRARY_PATH:$DIR/grib2/lib
ENV WRFIO_NCD_LARGE_FILE_SUPPORT=1
ENV WRF_EM_CORE=1

## Set environment for interactive container shells
RUN echo export MAIN_DIR=/opt/wrf >> /etc/bashrc && \
    echo export WRF_SRC_ROOT_DIR=${DIR}/WRF >> /etc/bashrc && \
    echo export DIR=${MAIN_DIR}/LIBRARIES >> /etc/bashrc && \
    echo export CC=mpicc >> /etc/bashrc && \
    echo export FC=mpif90 >> /etc/bashrc && \
    echo export F77=mpif90 >> /etc/bashrc && \
    echo export FFLAGS=-m64 >> /etc/bashrc && \
    echo export JASPERINC=$DIR/grib2/include >> /etc/bashrc && \
    echo export JASPERLIB=$DIR/grib2/lib >> /etc/bashrc && \
    echo export NETCDF=$DIR/NETCDF >> /etc/bashrc && \
    echo export PNETCDF=$DIR/PNETCDF >> /etc/bashrc && \
    echo export PHDF5=$DIR/PHDF5 >> /etc/bashrc && \
    echo export LDFLAGS=-L$DIR/grib2/lib >> /etc/bashrc && \
    echo export CPPFLAGS="-I${PHDF5}/include -I${PNETCDF}/include -I${NETCDF}/include -I$DIR/grib2/include" >> /etc/bashrc && \
    echo export PATH=$PATH:$DIR/grib2 >> /etc/bashrc && \
    echo export LD_LIBRARY_PATH=$PHDF5/lib:$PNETCDF/lib:$NETCDF/lib:$LD_LIBRARY_PATH:$DIR/grib2/lib >> /etc/bashrc && \
    echo export WRFIO_NCD_LARGE_FILE_SUPPORT=1 >> /etc/bashrc && \
    echo export WRF_EM_CORE=1 >> /etc/bashrc

## Install tools, libraries, and dependencies
WORKDIR $DIR

### Tools
RUN apt-get update -y && apt-get install -y \
    cmake \
    tcsh \
    wget \
    unzip \
    gawk \
    time \
    m4 \
    rsync \
    curl \
    file \
    gcc \
    gfortran \
    g++ \
    gcc-multilib \
    g++-multilib \
    hostname \
    make \
    ncl-ncarg \
    perl \
    tar

### Libraries
#### zlib 1.2.7
RUN wget https://zlib.net/fossils/zlib-1.2.7.tar.gz && \
    tar -xzf zlib-1.2.7.tar.gz && \
    cd zlib-1.2.7 && \
    ./configure --prefix=$DIR/grib2 && \
    make && make install 

#### libpng 1.2.50
RUN wget https://sourceforge.net/projects/libpng/files/libpng12/older-releases/1.2.50/libpng-1.2.50.tar.gz && \
    tar -xzf libpng-1.2.50.tar.gz && \
    cd libpng-1.2.50 && \
    ./configure --prefix=$DIR/grib2 && \
    make && make install

#### Jasper 1.900.1
RUN wget https://www.ece.uvic.ca/~frodo/jasper/software/jasper-1.900.1.zip && \
    unzip jasper-1.900.1.zip && \
    cd jasper-1.900.1 && \
    ./configure --prefix=$DIR/grib2 && \
    make && make install

### Install Dependencies
#### Third-party EPEL builds of NetCDF and OpenMPI
RUN add-apt-repository "deb http://us.archive.ubuntu.com/ubuntu xenial universe"
RUN apt-get install -y \
    libnetcdf-dev \
    libnetcdf11 \
    libnetcdff-dev \
    netcdf-bin \
    libpnetcdf-dev \
    libpnetcdf0d \
    pnetcdf-bin \
    libhdf5-openmpi-dev \
    openmpi-bin \
    libopenmpi-dev \
    mpi-default-bin \
    mpi-default-dev

RUN ln -sf /usr/include/pnetcdf* $PNETCDF/include && \
    ln -sf /usr/include/netcdf* $NETCDF/include && \
    ln -sf /usr/include/openmpi/ $NETCDF/include && \
    ln -sf /usr/lib/openmpi/lib $NETCDF/lib

#TODO: Check versions of above
## Intel Version list for reference
### PHDF5 1.10.4
### PNetCDF 1.11.0
### NetCDF-C 4.6.2
### NetCDF-Fortran 4.5.3

ENV NETCDF4=1
RUN echo export export NETCDF4=1 >> /etc/bashrc

## Install WRF 4.2.2
WORKDIR $MAIN_DIR

#ENV LDFLAGS="-lm -lnetcdff -lnetcdf -lpnetcdf"
#RUN echo export LDFLAGS="-lm -lnetcdff -lnetcdf -lpnetcdf" >> /etc/bashrc
#
#### Get WRF v4.2.2 tar archive
#RUN wget https://github.com/wrf-model/WRF/archive/refs/tags/v4.2.2.tar.gz && \
#    tar -zxf v4.2.2.tar.gz && \
#    mv WRF-4.2.2/ WRF
#
#WORKDIR $WRF_SRC_ROOT_DIR
#
#### Configure WRF
#RUN ./clean -a && \
#TODO: Check config option... 66 is Intel
#    echo '66\n1\n' | ./configure && \
#    awk -v add=" -L${DIR}/zlib-1.2.7" '/^ZLIB/ {$0=$0add} 1' configure.wrf > temp && mv temp configure.wrf
#
#### Compile WRF
#RUN time ./compile em_real 2>&1 | tee compile_em_real.log


#TODO: Add a check that WRF installed correctly, error otherwise
#TODO: Install WPS?

## For development
#TODO: Comment these out for production
RUN apt-get install -y \
    man \
    bash-completion \
    vim \ 
    htop \
    tmux 

RUN ldconfig
 
